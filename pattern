#!/usr/bin/env python
import sys
import struct


def pattern_create(length):
    pattern = ''
    parts = ['A', 'a', '0']
    while len(pattern) != length:
        pattern += parts[len(pattern) % 3]
        if len(pattern) % 3 == 0:
            parts[2] = chr(ord(parts[2]) + 1)
            if parts[2] > '9':
                parts[2] = '0'
                parts[1] = chr(ord(parts[1]) + 1)
                if parts[1] > 'z':
                    parts[1] = 'a'
                    parts[0] = chr(ord(parts[0]) + 1)
                    if parts[0] > 'Z':
                        parts[0] = 'A'
    return pattern


def pattern_offset(value, buflen):
    if value.startswith('0x'):
        value = struct.pack('<I', int(value, 16)).strip('\x00')
    pattern = pattern_create(buflen)
    try:
        return pattern.index(value)
    except ValueError:
        return 'Not found'


def print_help():
    print 'Usage: %s (c | o) <value> <buflen>' % sys.argv[0]


def check_hex(i):
    ret = ''
    if i.startswith('0x'):
        ret = int(i,16)
    else:
        try:
            ret = int(i)
        except:
            print_help()
            sys.exit(255)
    return ret

def main():
    command = ''
    num_value = ''
    # case: ./pattern 400
    if len(sys.argv) == 2:
        command = 'c'
        num_value = check_hex(sys.argv[1])
        print pattern_create(num_value)

    elif len(sys.argv) > 2:
        # case: ./pattern cr 400
        if sys.argv[1].lower().startswith('c'):
            command = 'c'
            num_value = check_hex(sys.argv[2])
            # do the create
            print pattern_create(num_value)
        # case: ./pattern off a1Aa
        elif sys.argv[1].lower().startswith('o'):
            command = 'o'
            # case: ./pattern off a1Aa 10000
            try:
                buflen = check_hex(sys.argv[3])
            except:
                buflen = 8192
            print pattern_offset(sys.argv[2], buflen)


if __name__ == '__main__':
    main()

